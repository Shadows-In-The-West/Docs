"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[177],{22604:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"function @within garbageCollector","params":[],"returns":[{"desc":"","lua_type":"garbageCollector\\r\\n"}],"function_type":"static","source":{"line":31,"path":"src/shared/garbageCollector.lua"}}],"properties":[],"types":[],"name":"garbageCollector","desc":"The garbage collector serves as a dump for \\"garbage\\" which can be\\ncleaned later on.\\n\\nWhat is garbage? In this context garbage is any value occupying space in memory\\nwhen it is no longer neccessary.\\n\\nGarbage can collect over time when programming. A good example of this would\\nbe any referance to old player data after they leave the server. These values\\nshould be stored in data stores and not still be using up memory of the server.\\n\\nTherefor we clean such garbage. Here are the following accepted types:\\n\\nInstance | RBXScriptConnection | objects with :Destroy()/:destroy() | functions\\n\\nFunctions can also be added. I don\'t use it for this purpose however it\'s derived\\nfrom other implementations of the same concept. It will call any function existed within\\nthe garbageCollector.","source":{"line":24,"path":"src/shared/garbageCollector.lua"}}')}}]);